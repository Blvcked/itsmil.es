// Bigger Hitbox ==
@mixin bigger-hitbox($scaleX: 2, $scaleY: 2, $debug: false) {
    position: relative;

    &::before {
        content: "";
        position: absolute;
        height: 100%;
        width: 100%;
        transform: scale($scaleX, $scaleY);
        transform-origin: bottom right;

        @if ($debug) {
            background-color: rgba(#f00, 30%);
        }
    }
}
.bigger-hitbox {
    @include bigger-hitbox;
}

// Vertical Text ==
@mixin vertical-text {
    writing-mode: vertical-rl;
    transform: rotate(180deg);
}
.vertical-text {
    @include vertical-text;
}

// Text Balance ==
@mixin text-balance {
    text-wrap: balance;
}
.text-balance {
    @include text-balance;
}

// Raw Button ==
@mixin raw-btn {
    border: unset;
    padding: unset;
    background: unset;
    outline: unset;
}
.raw-btn {
    @include raw-btn;
}

// Filtering ==
@mixin filter-blend($blend-mode: exclusion, $invert-percentage: false) {
    mix-blend-mode: $blend-mode;
    @if $invert-percentage {
        filter: invert($invert-percentage);
    }
}

.filter--exclusion {
    @include filter-blend(exclusion);
}

.filter--overlay {
    @include filter-blend(overlay);
}

.filter--plus-lighter--invert-half {
    @include filter-blend(plus-lighter, 50%);
}

/**
 * Mask Mixin
 * Creates a mask either below or above the content.
 * 
 * @param {String} $type - "below" or "above" to set the mask position.
 * @param {Color} $background - Background color of the mask.
 */
@mixin mask($type: "below", $background: rgb(0 0 0 / 40%)) {
    position: relative;
    $pseudo-element: if($type == "below", "::before", "::after");

    &#{ $pseudo-element } {
        content: "";
        pointer-events: none;
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        width: 100%;
        background: $background;
    }
}
